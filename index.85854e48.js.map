{"mappings":"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","sources":["js/game/gameModel.js"],"sourcesContent":["import { generateRandomNumber, copyMatrix, stringifyCoords, parseCoords } from \"./utils\";\n\n/*\n* 0 - empty field\n* 1-9 - fields numbers\n* 10 - closed field\n* 11 - mine\n* 12 - flag\n*/\n\n// matrix structure is [y][x]\nclass GameModel {\n\n\tisGameFinish;\n\tisGameOver;\n\thCells;\n\tvCells;\n\t_minesCount;\n\tview;\n\tmatrix;\n\tuserSelected;\n\ttime;\n\ttimerId;\n\tflagCounter;\n\n\tconstructor(hCells, vCells, minesCount, view) {\n\t\tthis.time = 0;\n\t\tthis.flagCounter = 0;\n\t\tthis.timerId = null;\n\t\tthis.isGameFinish = false;\n\t\tthis.isGameOver = false;\n\t\tthis.hCells = hCells;\n\t\tthis.vCells = vCells;\n\t\tthis._minesCount = minesCount;\n\t\tthis.view = view;\n\t\tthis.init();\n\t}\n\n\tinit() {\n\t\tconst { hCells, vCells, _minesCount } = this;\n\t\tthis.matrix = GameModel.generateGameMatrix(hCells, vCells, _minesCount);\n\t\tthis.calculate();\n\t\tthis.userSelected = GameModel.generateUserSelect(hCells, vCells);\n\t\tthis.view.init(copyMatrix(this.userSelected), this._minesCount);\n\t}\n\n\tstartNewGame() {\n\t\tthis.isGameFinish = false;\n\t\tthis.isGameOver = false;\n\t\tthis.flagCounter = 0;\n\t\tthis.resetTimer();\n\t\tthis.generateNewGameField();\n\t\tthis.view.startGame();\n\t\tthis.render();\n\t}\n\n\tgenerateNewGameField() {\n\t\tconst { hCells, vCells, _minesCount } = this;\n\t\tthis.matrix = GameModel.generateGameMatrix(hCells, vCells, _minesCount);\n\t\tthis.calculate();\n\t\tthis.userSelected = GameModel.generateUserSelect(hCells, vCells);\n\t}\n\n\trender() {\n\t\tconst valueMatrix = copyMatrix(this.userSelected);\n\t\tconst minesLeft = this._minesCount - this.flagCounter;\n\t\tthis.view.render(valueMatrix, minesLeft);\n\t}\n\n\tselectOne(x, y) {\n\t\tif (this.isGameOver || this.isGameFinish) return;\n\n\t\tif (this.timerId === null && this.flagCounter === 0) {\n\t\t\tthis.startTimer();\n\t\t}\n\n\t\tconst userValue = this.userSelected[y][x];\n\n\t\tif (!GameModel.isClosed(userValue) || GameModel.isMarked(userValue)) return;\n\n\t\tconst value = this.matrix[y][x];\n\n\t\tif (GameModel.isEmpty(value)) {\n\t\t\tconst coords = GameModel.getClosestEmptyCells(this.matrix, x, y);\n\t\t\tthis.openEmptyCells(coords);\n\t\t\tthis.checkGameFinish();\n\t\t} else if (GameModel.isMine(value)) {\n\t\t\tthis.gameOver();\n\t\t} else {\n\t\t\tthis.setUserSelect(x, y, this.matrix[y][x]);\n\t\t\tthis.checkGameFinish();\n\t\t}\n\t\tthis.render();\n\t}\n\n\tmarkCell(x, y) {\n\t\tif (\n\t\t\tthis.isGameOver\n\t\t\t|| this.isGameFinish\n\t\t\t|| this.timerId === null\n\t\t) return;\n\n\t\tconst value = this.userSelected[y][x];\n\n\t\tif (GameModel.isMarked(value)) {\n\t\t\tthis.reduceFlagCounter();\n\t\t\tthis.userSelected[y][x] = 10;\n\t\t} else if (GameModel.isClosed(value)) {\n\t\t\tthis.increaseFlagCounter();\n\t\t\tthis.userSelected[y][x] = 12;\n\n\t\t\tthis.checkGameFinish();\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t\tthis.render();\n\t}\n\n\tstartTimer() {\n\t\tthis.time = 0;\n\t\tthis.view.setTime(0);\n\n\t\tif (this.timerId !== null) {\n\t\t\tclearInterval(this.timerId);\n\t\t}\n\n\t\tthis.timerId = setInterval(() => {\n\t\t\tconst time = this.increaseTime();\n\t\t\tthis.view.setTime(time);\n\t\t}, 1000);\n\t}\n\n\tcheckGameFinish() {\n\t\tif (this.flagCounter === this._minesCount) {\n\t\t\tif (this.isOpenedAllCells() && this.isFlagsPlacedRight()) {\n\t\t\t\tthis.finishGame();\n\t\t\t}\n\t\t}\n\t}\n\n\tfinishGame() {\n\t\tthis.isGameFinish = true;\n\t\tthis.stopTimer();\n\t\tthis.view.finishGame();\n\t}\n\n\tresetTimer() {\n\t\tthis.time = 0;\n\t\tthis.view.setTime(0);\n\t\tif (this.timerId !== null) {\n\t\t\tclearInterval(this.timerId);\n\t\t\tthis.timerId = null;\n\t\t}\n\t}\n\n\tstopTimer() {\n\t\tclearInterval(this.timerId);\n\t\tthis.timerId = null;\n\t}\n\n\tincreaseTime() {\n\t\treturn ++this.time;\n\t}\n\n\tincreaseFlagCounter() {\n\t\tthis.flagCounter++;\n\t}\n\n\treduceFlagCounter() {\n\t\tthis.flagCounter--;\n\t}\n\n\tgameOver() {\n\t\tconst { userSelected } = this;\n\t\tthis.stopTimer();\n\n\t\tthis.matrix.forEach((row, i) => {\n\t\t\trow.forEach((value, j) => {\n\t\t\t\tif (GameModel.isMine(value)) {\n\t\t\t\t\tuserSelected[i][j] = 11;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.isGameOver = true;\n\t\tthis.view.gameOver();\n\t}\n\n\tcalculate() {\n\t\tthis.matrix = this.matrix.map((currentRow, i, rowArr) => {\n\t\t\tconst prevRow = rowArr[i - 1] ?? [];\n\t\t\tconst nextRow = rowArr[i + 1] ?? [];\n\n\t\t\treturn currentRow.map((cell, j) => {\n\t\t\t\tif (GameModel.isMine(cell)) {\n\t\t\t\t\treturn cell;\n\t\t\t\t}\n\n\t\t\t\treturn GameModel.isMine(prevRow[j - 1])\n\t\t\t\t\t+ GameModel.isMine(prevRow[j])\n\t\t\t\t\t+ GameModel.isMine(prevRow[j + 1])\n\t\t\t\t\t+ GameModel.isMine(currentRow[j - 1])\n\t\t\t\t\t+ GameModel.isMine(currentRow[j + 1])\n\t\t\t\t\t+ GameModel.isMine(nextRow[j - 1])\n\t\t\t\t\t+ GameModel.isMine(nextRow[j])\n\t\t\t\t\t+ GameModel.isMine(nextRow[j + 1]);\n\t\t\t});\n\n\t\t});\n\t}\n\n\topenEmptyCells(coords) {\n\t\tcoords.forEach((data) => {\n\t\t\tconst [x, y] = parseCoords(data);\n\t\t\tthis.setUserSelect(x, y, 0);\n\t\t\tthis.openClosestCells(x, y);\n\t\t});\n\t}\n\n\topenClosestCells(x, y) {\n\t\tconst { hCells, vCells } = this;\n\t\tconst points = [\n\t\t\t[x - 1, y - 1],\n\t\t\t[x, y - 1],\n\t\t\t[x + 1, y - 1],\n\t\t\t[x - 1, y],\n\t\t\t[x + 1, y],\n\t\t\t[x - 1, y + 1],\n\t\t\t[x, y + 1],\n\t\t\t[x + 1, y + 1],\n\t\t];\n\t\tpoints.forEach(([pointX, pointY]) => {\n\t\t\tif (\n\t\t\t\tpointY >= 0\n\t\t\t\t&& pointY < vCells\n\t\t\t\t&& pointX >= 0\n\t\t\t\t&& pointX < hCells\n\t\t\t\t&& GameModel.isClosed(this.userSelected[pointY][pointX])\n\t\t\t) {\n\t\t\t\tthis.setUserSelect(pointX, pointY, this.matrix[pointY][pointX]);\n\t\t\t}\n\t\t});\n\t}\n\n\tsetUserSelect(x, y, value) {\n\t\tthis.userSelected[y][x] = value;\n\t}\n\n\tisFlagsPlacedRight() {\n\t\tconst { userSelected, matrix } = this;\n\n\t\tconst flags = [];\n\n\t\tuserSelected.forEach((arr, i) => {\n\t\t\tarr.forEach((value, j) => {\n\t\t\t\tif (GameModel.isMarked(value)) {\n\t\t\t\t\tflags.push([i, j]);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst idx = flags.findIndex(([i, j]) => (\n\t\t\t!GameModel.isMine(matrix[i][j])\n\t\t));\n\t\treturn idx === -1;\n\t}\n\n\tisOpenedAllCells() {\n\t\tconst idx = this.userSelected.findIndex((row) => {\n\t\t\tconst rowIdx = row.findIndex(\n\t\t\t\t(value) => GameModel.isClosed(value)\n\t\t\t);\n\t\t\treturn rowIdx !== -1;\n\t\t});\n\t\treturn idx === -1;\n\t}\n\n\tstatic getClosestEmptyCells(matrix, x, y) {\n\t\tconst coords = new Map();\n\n\t\t(function step(x, y) {\n\t\t\tcoords.set(stringifyCoords(x, y), true);\n\n\t\t\tconst points = [\n\t\t\t\t[x - 1, y - 1],\n\t\t\t\t[x, y - 1],\n\t\t\t\t[x + 1, y - 1],\n\t\t\t\t[x - 1, y],\n\t\t\t\t[x + 1, y],\n\t\t\t\t[x - 1, y + 1],\n\t\t\t\t[x, y + 1],\n\t\t\t\t[x + 1, y + 1],\n\t\t\t];\n\n\t\t\tpoints.forEach(([pointX, pointY]) => {\n\t\t\t\tconst key = stringifyCoords(pointX, pointY);\n\t\t\t\tif (\n\t\t\t\t\tmatrix[pointY]\n\t\t\t\t\t&& GameModel.isEmpty(matrix[pointY][pointX])\n\t\t\t\t\t&& !coords.has(key)\n\t\t\t\t) {\n\t\t\t\t\tstep(pointX, pointY);\n\t\t\t\t}\n\t\t\t});\n\n\t\t})(x, y);\n\n\t\treturn Array.from(coords.keys());\n\t}\n\n\tstatic isMine(value) {\n\t\treturn value === 11;\n\t}\n\n\tstatic isClosed(value) {\n\t\treturn value === 10;\n\t}\n\n\tstatic isEmpty(value) {\n\t\treturn value === 0;\n\t}\n\n\tstatic isMarked(value) {\n\t\treturn value === 12;\n\t}\n\n\tstatic generateGameMatrix(hCells, vCells, minesCount) {\n\t\tconst matrix = [];\n\n\t\tfor (let i = 0; i < vCells; i++) {\n\t\t\tconst nullableRow = new Array(hCells).fill(0);\n\t\t\tmatrix.push(nullableRow);\n\t\t}\n\n\t\t(function fillOne(count) {\n\t\t\tif (count === 0) return;\n\t\t\tconst x = generateRandomNumber(0, hCells);\n\t\t\tconst y = generateRandomNumber(0, vCells);\n\n\t\t\tif (matrix[y][x] !== 0) {\n\t\t\t\treturn fillOne(count);\n\t\t\t}\n\n\t\t\tmatrix[y][x] = 11;\n\t\t\tfillOne(count - 1);\n\t\t})(minesCount);\n\n\t\treturn matrix;\n\t}\n\n\tstatic generateUserSelect(hCells, vCells) {\n\t\tconst arr = [];\n\n\t\tfor (let i = 0; i < vCells; i++) {\n\t\t\tconst emptyRow = new Array(hCells).fill(10);\n\t\t\tarr.push(emptyRow);\n\t\t}\n\n\t\treturn arr;\n\t}\n\n}\n\nexport default GameModel;\n"],"names":["$2b3df9c860a69b90$var$GameModel","isGameFinish","isGameOver","hCells","vCells","_minesCount","view","matrix","userSelected","time","timerId","flagCounter","minesCount","this","init","generateGameMatrix","calculate","generateUserSelect","$eBuhp","copyMatrix","startNewGame","resetTimer","generateNewGameField","startGame","render","valueMatrix","minesLeft","selectOne","x2","y2","startTimer","userValue","isClosed","isMarked","value","isEmpty","coords","getClosestEmptyCells","openEmptyCells","checkGameFinish","isMine","gameOver","setUserSelect","markCell","x1","y1","reduceFlagCounter","increaseFlagCounter","setTime","clearInterval","setInterval","increaseTime","isOpenedAllCells","isFlagsPlacedRight","finishGame","stopTimer","forEach","row","i","j","map","currentRow","rowArr","prevRow","nextRow","cell","data","x","y","parseCoords","openClosestCells","x5","y5","pointX","pointY","x3","y3","value1","flags","arr","push","findIndex","x4","y4","Map","step","set","stringifyCoords","key","has","Array","from","keys","value2","value3","value4","hCells1","vCells1","minesCount1","nullableRow","fill","fillOne","count","generateRandomNumber","hCells2","vCells2","emptyRow","$2b3df9c860a69b90$export$2e2bcd8739ae039"],"version":3,"file":"index.85854e48.js.map"}